name: Deploy Flask App to Humanitec

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_NAME: flask-app
      HUMANITEC_API_TOKEN: ${{ secrets.HUMANITEC_API_TOKEN }}

    steps:
      # Step 1: Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Instalar o Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Step 3: Instalar dependências do Python
      - name: Install dependencies
        run: |
          pip install -r src/requirements.txt

      # Step 4: Login no Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 5: Build da imagem Docker com tag única
      - name: Build Docker image
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          docker build --no-cache -t $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT .
          docker tag $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT $AZURE_REGISTRY/$IMAGE_NAME:latest

      # Step 6: Push da imagem Docker para o ACR
      - name: Push Docker image to Azure Container Registry
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          docker push $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT
          docker push $AZURE_REGISTRY/$IMAGE_NAME:latest

      # Step 7: Instalar o humctl CLI
      - name: Install humctl
        run: |
          echo "Baixando humctl..."
          curl -fLO https://github.com/humanitec/cli/releases/download/v0.33.0/cli_0.33.0_linux_amd64.tar.gz
          tar xvzf cli_0.33.0_linux_amd64.tar.gz
          sudo install -o root -g root -m 0755 humctl /usr/local/bin/humctl
          rm cli_0.33.0_linux_amd64.tar.gz README.md
          humctl version

      # Step 8: Configurar autenticação usando variável de ambiente
      - name: Set up Humanitec Token
        run: |
          export HUMANITEC_TOKEN=${{ secrets.HUMANITEC_API_TOKEN }}
          humctl config set token $HUMANITEC_TOKEN
          # Verificar se o token foi configurado corretamente
          humctl config view

      # Step 9: Validar o arquivo Score antes do deploy
      - name: Validate Score file
        env:
          HUMANITEC_ORG: labcle
          HUMANITEC_APP: api-flask
          HUMANITEC_ENV: development
        run: humctl score validate --org $HUMANITEC_ORG --app $HUMANITEC_APP --env $HUMANITEC_ENV

      # Step 10: Realizar o deploy usando Humanitec
      - name: Deploy using Humanitec
        env:
          HUMANITEC_ORG: labcle
          HUMANITEC_APP: api-flask
          HUMANITEC_ENV: development
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          humctl score deploy --wait --org $HUMANITEC_ORG --app $HUMANITEC_APP --env $HUMANITEC_ENV \
            --property containers.api-flask.image=$AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT

      # Step 11: Listar imagens no ACR para verificação
      - name: List images in ACR for verification
        run: |
          echo "Listing images in ACR for verification..."
          az acr repository show-tags --name ${{ secrets.ACR_LOGIN_SERVER }} --repository $IMAGE_NAME
          az acr repository show-manifests --name ${{ secrets.ACR_LOGIN_SERVER }} --repository $IMAGE_NAME
