name: Deploy Flask App to Humanitec

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_NAME: flask-app
      HUMANITEC_ORG: labcle
      HUMANITEC_APP: api-flask
      HUMANITEC_ENV: development

    steps:
      # Step 1: Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Instalar o Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Step 3: Instalar dependências do Python
      - name: Install dependencies
        run: |
          pip install -r src/requirements.txt

      # Step 4: Login no Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 5: Build e Push da imagem Docker
      - name: Build and Push Docker image
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          docker build --no-cache -t $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT .
          docker tag $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT $AZURE_REGISTRY/$IMAGE_NAME:latest
          docker push $AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT
          docker push $AZURE_REGISTRY/$IMAGE_NAME:latest

      # Step 6: Deploy via API do Humanitec
      - name: Deploy via Humanitec API
        run: |
          GIT_COMMIT=$(git rev-parse --short HEAD)
          
          echo "Criando Delta no Humanitec..."
          RESPONSE=$(curl -s -X POST "https://api.humanitec.io/orgs/${{ env.HUMANITEC_ORG }}/apps/${{ env.HUMANITEC_APP }}/deltas" \
            -H "Authorization: Bearer ${{ secrets.HUMANITEC_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "modules": {
                "'${{ env.HUMANITEC_APP }}'": {
                  "containers": {
                    "api-flask": {
                      "image": "'$AZURE_REGISTRY/$IMAGE_NAME:$GIT_COMMIT'"
                    }
                  }
                }
              },
              "metadata": {
                "message": "Deploy via GitHub Actions"
              }
            }')
      
          echo "Resposta da criação do Delta:"
          echo "$RESPONSE"
          
          # Extraindo o Delta ID
          DELTA_ID=$(echo "$RESPONSE" | jq -r '.id')
          
          # Verificar se o Delta ID foi criado corretamente
          if [ "$DELTA_ID" == "null" ] || [ -z "$DELTA_ID" ]; then
            echo "Erro ao criar Delta: $RESPONSE"
            exit 1
          fi
          
          echo "Delta criado com ID: $DELTA_ID"
          
          echo "Aplicando Delta ao ambiente..."
          DEPLOY_RESPONSE=$(curl -s -X POST "https://api.humanitec.io/orgs/${{ env.HUMANITEC_ORG }}/apps/${{ env.HUMANITEC_APP }}/envs/${{ env.HUMANITEC_ENV }}/deploy" \
            -H "Authorization: Bearer ${{ secrets.HUMANITEC_API_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "delta_id": "'$DELTA_ID'"
            }')
          
          echo "Resposta do Deployment:"
          echo "$DEPLOY_RESPONSE"
          
          # Verificar se o deployment foi aplicado com sucesso
          if echo "$DEPLOY_RESPONSE" | grep -q "error"; then
            echo "Erro ao aplicar o Delta: $DEPLOY_RESPONSE"
            exit 1
          fi
          
          echo "Deployment realizado com sucesso!"
      