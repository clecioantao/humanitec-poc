name: Deploy Flask App to Humanitec

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_NAME: myapp

    steps:
      # Step 1: Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Instalar o Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Step 3: Instalar dependências do Python
      - name: Install dependencies
        run: |
          if [ -f src/requirements.txt ]; then
            pip install -r src/requirements.txt
          else
            echo "requirements.txt not found in src/"
            exit 1
          fi

      # Step 4: Login no Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 5: Configurar o contexto do AKS no kubectl
      - name: Configure kubectl
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }} --overwrite-existing

      # Step 6: Login no Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 7: Build da imagem Docker
      - name: Build Docker image
        run: |
          docker build -t $AZURE_REGISTRY/$IMAGE_NAME:latest .

      # Step 8: Push da imagem Docker para o ACR
      - name: Push Docker image to Azure Container Registry
        run: |
          docker push $AZURE_REGISTRY/$IMAGE_NAME:latest

      # Step 9: Criar o Secret no Kubernetes
      - name: Create Kubernetes Secret
        run: |
          kubectl delete secret acr-secret -n development-api-flask || true
          kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
          --docker-username=${{ secrets.ACR_USERNAME }} \
          --docker-password=${{ secrets.ACR_PASSWORD }} \
          --docker-email=clecio.antao@gmail.com \
          -n development-api-flask

      # Step 10: Instalar o humctl CLI
      - name: Install humctl
        run: |
          echo "Baixando humctl..."
          curl -fLO https://github.com/humanitec/cli/releases/download/v0.33.0/cli_0.33.0_linux_amd64.tar.gz
          tar xvzf cli_0.33.0_linux_amd64.tar.gz
          sudo install -o root -g root -m 0755 humctl /usr/local/bin/humctl
          rm cli_0.33.0_linux_amd64.tar.gz README.md
          humctl version

      # Step 11: Login no Humanitec usando o token
      - name: Login to Humanitec
        run: humctl login --token ${{ secrets.HUMANITEC_API_TOKEN }}

      # Step 12: Validar o arquivo Score antes do deploy
      - name: Validate Score file
        env:
          HUMANITEC_ORG: labcle
          HUMANITEC_APP: api-flask
          HUMANITEC_ENV: development
        run: humctl score validate --org $HUMANITEC_ORG --app $HUMANITEC_APP --env $HUMANITEC_ENV

      # Step 13: Realizar o deploy usando Humanitec
      - name: Deploy using Humanitec
        env:
          HUMANITEC_ORG: labcle
          HUMANITEC_APP: api-flask
          HUMANITEC_ENV: development
        run: humctl score deploy --wait --org $HUMANITEC_ORG --app $HUMANITEC_APP --env $HUMANITEC_ENV \
          --set services.api-flask.containers[0].image="${AZURE_REGISTRY}/${IMAGE_NAME}:latest"
