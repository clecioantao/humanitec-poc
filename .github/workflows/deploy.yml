name: Deploy Flask App to Humanitec

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AZURE_REGISTRY: ${{ secrets.ACR_LOGIN_SERVER }}
      IMAGE_NAME: flask-app

    steps:
      # Step 1: Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Instalar o Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.9

      # Step 3: Instalar dependências do Python
      - name: Install dependencies
        run: |
          if [ -f src/requirements.txt ]; then
            pip install -r src/requirements.txt
          else
            echo "requirements.txt not found in src/"
            exit 1
          fi

      # Step 4: Login no Azure Container Registry (ACR)
      - name: Login to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_LOGIN_SERVER }} \
          --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 5: Build da imagem Docker
      - name: Build Docker image
        run: |
          docker build -t $AZURE_REGISTRY/$IMAGE_NAME:latest .

      # Step 6: Push da imagem Docker para o ACR
      - name: Push Docker image to Azure Container Registry
        run: |
          docker push $AZURE_REGISTRY/$IMAGE_NAME:latest

      # Step 7: Instalar o humctl CLI (Método que estava funcionando)
      - name: Install humctl
        run: |
          echo "Baixando humctl..."
          curl -fLO https://github.com/humanitec/cli/releases/download/v0.33.0/cli_0.33.0_linux_amd64.tar.gz
          tar xvzf cli_0.33.0_linux_amd64.tar.gz
          sudo install -o root -g root -m 0755 humctl /usr/local/bin/humctl
          rm cli_0.33.0_linux_amd64.tar.gz README.md
          humctl version

      # Step 8: Validar o arquivo Score antes do deploy (opcional)
      - name: Validate Score file
        run: |
          echo "Validando o arquivo Score..."
          humctl score validate --org ${{ secrets.HUMANITEC_ORG }} --app ${{ secrets.HUMANITEC_APP }} --env ${{ secrets.HUMANITEC_ENV }}

      # Step 9: Deploy usando Humanitec com curl
      - name: Deploy using Humanitec API
        run: |
          echo "Iniciando deploy na Humanitec usando curl..."
          response=$(curl -s -o response.json -w "%{http_code}" -X POST "https://api.humanitec.io/orgs/${{ secrets.HUMANITEC_ORG }}/apps/${{ secrets.HUMANITEC_APP }}/envs/${{ secrets.HUMANITEC_ENV }}/delta" \
          -H "Authorization: Bearer ${{ secrets.HUMANITEC_API_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
                "modules": {
                  "api-flask": {
                    "image": "'"$AZURE_REGISTRY/$IMAGE_NAME:latest"'"
                  }
                }
              }')

          if [ "$response" -eq 201 ]; then
            echo "Deploy bem-sucedido!"
            cat response.json
          else
            echo "Erro ao realizar o deploy. Código HTTP: $response"
            cat response.json
            exit 1
          fi

      # Step 10: Verificar o status do deployment (opcional)
      - name: Check Deployment Status
        run: |
          echo "Verificando status do deployment..."
          status=$(curl -s -X GET "https://api.humanitec.io/orgs/${{ secrets.HUMANITEC_ORG }}/apps/${{ secrets.HUMANITEC_APP }}/envs/${{ secrets.HUMANITEC_ENV }}/deploys" \
          -H "Authorization: Bearer ${{ secrets.HUMANITEC_API_TOKEN }}" \
          -H "Content-Type: application/json")
          echo "Status do deployment: $status"
