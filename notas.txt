token humanitec
AKnn5iRHx4wnJdo0kB-R_1QP5ytLuWfS6_9BA3v1ymkC

curl -X GET https://api.humanitec.io/v2/applications \
-H "Authorization: Bearer AKnn5iRHx4wnJdo0kB-R_1QP5ytLuWfS6_9BA3v1ymkC"

curl -X GET https://api.humanitec.io/orgs/labcle/applications \
-H "Authorization: Bearer AKnn5iRHx4wnJdo0kB-R_1QP5ytLuWfS6_9BA3v1ymkC"

Results are AI generated. Please be aware of that when code snippets or concrete solutions approaches are proposed, and double check with sources referenced, or ask our support at support@humanitec.com.
token curl test
To test your Humanitec API token using curl, you can make a simple API request to retrieve information about your organizations. Here's an example command:

curl -H "Authorization: Bearer ${HUMANITEC_TOKEN}" https://api.humanitec.io/orgs
This command will use your Humanitec API token to authenticate and retrieve a list of organizations you have access to. Make sure to replace ${HUMANITEC_TOKEN} with your actual Humanitec API token.
If the token is valid, you should receive a JSON response with information about your organizations. If the token is invalid or expired, you'll receive an error message.
This method of testing your token is mentioned in the API References documentation.
Remember to keep your API token secure and never share it publicly.

Verificar conexao
 curl -H "Authorization: Bearer AKnn5iRHx4wnJdo0kB-R_1QP5ytLuWfS6_9BA3v1ymkC" https://api.humanitec.io/orgs

 az aks get-credentials --resource-group humanitec-poc-rg --name humanitec-aks

curl -H "Authorization: Bearer AKnn5iRHx4wnJdo0kB-R_1QP5ytLuWfS6_9BA3v1ymkC" https://api.humanitec.io/orgs/labcle/apps


curl -X POST https://api.humanitec.io/orgs/labcle/apps/humanitec-poc/envs/dev/deploys \
-H "Authorization: Bearer $HUMANITEC_API_TOKEN" \
-H "Content-Type: application/json" \
-d '{
  "modules": {
    "myapp": {
      "image": "'"${ACR_LOGIN_SERVER}/myapp:${GITHUB_SHA}"'"
    }
  }
}'

{"set_id":"","comment":"","id":"18072e400c50c548","env_id":"dev","created_at":"2024-11-12T09:23:54.366649672Z","created_by":"s-2b2f164c-46cc-4620-bff9-1b6c2f5adc38","status":"pending","status_changed_at":"2024-11-12T09:23:54.366649672Z","from_id":"","export_status":"","export_file":""}%        


Verificar deploy ativo:
curl -X GET https://api.humanitec.io/orgs/labcle/apps/humanitec-poc/envs/dev/deploys \
-H "Authorization: Bearer $HUMANITEC_API_TOKEN"

Obter load balancer
az network public-ip list --resource-group humanitec-poc-rg --query "[].{ip:ipAddress}" --output table

Obter node resource group
az aks show --resource-group humanitec-poc-rg --name humanitec-aks --query nodeResourceGroup

Crie um Load Balancer:
az network lb create \
  --resource-group MC_humanitec-poc-rg_humanitec-aks_northeurope \
  --name myAksLoadBalancer \
  --sku Standard \
  --frontend-ip-name myFrontEndPool \
  --backend-pool-name myBackEndPool

Associar um IP ao Load Balancer:
az network public-ip create \
  --resource-group MC_humanitec-poc-rg_humanitec-aks_northeurope \
  --name myPublicIP \
  --sku Standard

Obtenha o IP do Load Balancer:
az network public-ip list --resource-group MC_humanitec-poc-rg_humanitec-aks_northeurope --query "[].ipAddress" --output table


---

location: namespaces
data:
  manifests:
    - apiVersion: v1
      kind: Namespace
      metadata:
        name: humanitec-dev
        labels:
          environment: dev
        annotations:
          managed-by: humanitec

---

location: namespaces
data:
  apiVersion: v1
  kind: Namespace
  metadata:
    name: humanitec-dev
    labels:
      environment: dev
    annotations:
      managed-by: humanitec

---

Obter o nome do Resource Group do seu cluster:
az aks list --query '[].{name: name, resourceGroup: resourceGroup}' -o table

Name           ResourceGroup
-------------  ----------------
humanitec-aks  humanitec-poc-rg

Obter informações detalhadas sobre o cluster AKS:
az aks show --resource-group humanitec-poc-rg --name humanitec-aks

---

humctl resources check-account Azure-testes

---

export MANAGED_IDENTITY_RESOURCE_GROUP="humanitec-poc-rg"
export AKS_RESOURCE_GROUP_NAME="humanitec-poc-rg"
export AKS_CLUSTER_NAME="humanitec-aks"
export MANAGED_IDENTITY_NAME="humanitec-identity"

az identity list --resource-group humanitec-rg --query '[].name' -o tsv

----

cat << EOF > create-resdef-azure.yaml
# Conectar ao cluster AKS usando credenciais temporárias definidas através de uma Cloud Account
apiVersion: entity.humanitec.io/v1b1
kind: Definition
metadata:
  id: api-flask
entity:
  name: api-flask
  type: k8s-cluster
  # Usando nossa Cloud Account já existente chamada 'azure-testes'
  driver_account: azure-testes
  driver_type: humanitec/k8s-cluster-aks
  driver_inputs:
    values:
      name: ${AKS_CLUSTER_NAME}
      resource_group: ${AKS_RESOURCE_GROUP_NAME}
      subscription_id: ${SUBSCRIPTION_ID}
      tenant_id: ${ARM_TENANT_ID}
      server_app_id: 6dae42f8-4368-4678-94ff-3960e28e3630
  criteria:
    - app_id: api-flask
EOF

---

kubectl create secret docker-registry acr-secret \
  --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
  --docker-username=${{ secrets.ACR_USERNAME }} \
  --docker-password=${{ secrets.ACR_PASSWORD }} \
  --docker-email=clecio.antao@gmail.com \
  -n development-api-flask